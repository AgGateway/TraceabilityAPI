title AgGateway Traceability - Planting Operations

actor Farmer
participant MobileApp

participant MobileLocalAPI
control Tractor Display
control CAN
control planter
control planter Box
participant arable field
database DataPlatform

== log in ==
Farmer->MobileApp: log in
MobileApp -> MobileLocalAPI: POST /operatorParty
MobileApp -> DataPlatform: authenticate

== field selection; on-line ==
Farmer->MobileApp: retrieve my fields
MobileApp ->DataPlatform: GET /as-planted/V1/field-list
DataPlatform -->MobileApp:geospatial-list
Farmer->MobileApp: select this field
MobileApp ->DataPlatform: GET /as-planted/V1/field/{id}
DataPlatform -->MobileApp: geospatial

== shipped products; on-line ==
Farmer ->MobileApp: scan QR on delivery document
MobileApp ->DataPlatform: GET /shipped-item-instance-list?shipmentId&retailerId
DataPlatform -->MobileApp: shipped-item-instance-list
MobileApp -> MobileApp: identify containers typeCode= bags | bulk box

loop until this field is complete
== pick operation; warehouse to field; transport and transfer events; tendering is more of the normal for larger farms; smaller producers are using bags==
== fill operation, off-line MobileApp <-> MobileLocalAPI <-> SQLiteDB  ==
Farmer->MobileApp: Start Fill Operation
MobileApp -> MobileLocalAPI: GET /device-resources
MobileLocalAPI --> MobileApp: ^device-resources
Farmer -> MobileApp: select device configuration
MobileApp -> MobileLocalAPI: POST /operation typeCode=Fill, startDateTime=, operator
MobileLocalAPI -->MobileApp: operationUUID
MobileApp ->Tractor Display: Wi-Fi: Start Fill Operation
note left of Tractor Display: future state with Wi-Fi/API-led displays
MobileApp -> MobileLocalAPI: GET /container-list
note left of MobileApp: source
MobileLocalAPI --> MobileApp: container-list

MobileApp -> MobileLocalAPI: GET /container-list
note left of MobileApp: target
MobileLocalAPI --> MobileApp: container-list



loop for-each sourceContainer (Tender Bulk Box or Seed Bag)
note left of MobileApp:RFID, Manifest QR with serialized bulk boxes, and perhaps serialized bags
Farmer ->MobileApp: identify source container
Farmer ->MobileApp:record start weight or volume pct, or decrement bag inventory

Farmer ->MobileApp: select product from list
note left of MobileApp: should match shipped Item Instance entry
MobileApp ->Tractor Display: Wi-Fi: select product from list

MobileApp -> MobileLocalAPI: POST /critical-tracking-event
note left of MobileLocalAPI: CTE type, \ntru.truRole.code=Source, \ntru.timePeriod.startDateTime, \ntru.Status.code\noperation.UUID,


MobileLocalAPI -->MobileApp: cteUUID, truUUID. truRoleUUID(Source)
loop for-each targetContainer (planter Box, fertilizer)
Farmer ->MobileApp: identify targetContainer
Farmer ->MobileApp:record start weight or volume pct
Farmer ->planter Box: fill targetContainer

MobileApp ->MobileLocalAPI: POST /traceable-resource-unit
note left of MobileLocalAPI: roleCode=Target,timePeriod, 
MobileLocalAPI -->MobileApp:truRoleUUID(Target)
MobileApp -> MobileLocalAPI: PATCH /traceable-resource-unit/{truUUID(Source)}?endWeight=$
MobileLocalAPI -->MobileApp: truUUID(Source)


end
end
MobileApp ->MobileLocalAPI: PATCH /critical-tracking-event/{cteUUID}

note left of MobileLocalAPI: CTE transfer to planter status=complete with end date time
note left of MobileLocalAPI:CTE includes one TRU per target container with item instance (qty/lot)\nsourceTRU has remaining item volume weight
MobileApp ->MobileLocalAPI: PATCH /operation/{operationUUID}/endDateTime&status.code=Complete

==operation planting; off-line MobileApp <-> MobileLocalAPI <-> SQLiteDB ==
MobileApp -> MobileLocalAPI: POST /operation type=Plant
MobileLocalAPI -->MobileApp: operationUUID
MobileApp ->Tractor Display: Wi-Fi: Start Fill Operation
loop for-each sourceTRU with planterBox
MobileApp ->MobileLocalAPI: POST /traceable-resource-unit/{truUUID}?roleCode=source
note left of MobileLocalAPI: creates new truRole
end
Farmer -> MobileApp: start planting opertion
MobileApp -> MobileApp: Create Operation type=Plant
MobileApp ->Tractor Display: start planting operation
 note left of Tractor Display: future state with Wi-Fi/API-led displays
Tractor Display -> CAN: CAN message
CAN -> planter: I/O
planter -> planter: start vacuum motor
loop until-refill-required
planter ->planter Box: drop seed
planter Box ->arable field: drop seed
planter ->arable field: cover seed
planter -> planter: record point on arable field
planter ->Tractor Display: log point
end

Tractor Display --> MobileApp: geometry of subfield(point)
MobileApp ->MobileLocalAPI: PATCH /critical-tracking-event/{cteUUID}
end
MobileApp ->MobileLocalAPI: PATCH /critical-tracking-event/{cteUUID}
